services:

  nginx:
    image: nginx:latest
    ports:
      - "7777:7777"  # Expose Nginx à l'hôte sur le port 7777
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Monte ton fichier nginx.conf
    depends_on:
      - server
      - frontend_client
    networks:
      - transcendence

  server:
    build:
      context: .
      dockerfile: GameServer/Dockerfile.server
    networks:
        - transcendence
    ports:
        - "8000:8000"
    environment:
      AI_WS_URL: "ws://server:8000"
      DISPLAY: ${DISPLAY} # Utilise la variable d'environnement DISPLAY de l'hôte
      SDL_AUDIODRIVER: "dummy" # Désactive le son pour éviter les erreurs de son
      XDG_RUNTIME_DIR: "/tmp/runtime-docker" # Utilise un répertoire temporaire pour les fichiers X11
#      LIBGL_DRI3_DISABLE: "1" # Désactive DRI3 pour éviter les erreurs de rendu
#      LIBGL_ALWAYS_SOFTWARE: "1" # Utilise le rendu logiciel pour éviter les erreurs de rendu

    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix # Monte le socket X11 de l'hôte
      - /dev/dri:/dev/dri  # Monte les périphériques graphiques pour l'accélération matérielle

    stdin_open: true # Maintenir STDIN ouvert pour interaction (optionnel)
    tty: true # Assurer un terminal interactif

  ai_client:
    build:
      context: .
      dockerfile: PongAI/Dockerfile.ai
    depends_on:
      - nginx
      - server
      - frontend_client
    networks:
        - transcendence
    volumes:
        - ./PongAI/ai_data:/app/ai_data  # Nouveau volume pour sauvegarder les données AI

  frontend_client:
    build:
      context: .
      dockerfile: AstroPong/Dockerfile.frontend
    ports:
      - "5173:5173"
    depends_on:
      - server
    networks:
        - transcendence
    environment:
      VITE_BACKEND_URL: "http://nginx:81"
      VITE_WS_URL: "ws://nginx:81"

networks:
  transcendence:
    driver: bridge